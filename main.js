import { API, Upload, Updates } from "vk-io";
import fs from "fs"

const api = new API({
	token: process.env.TOKEN
});

const upload = new Upload({
	api
});

const updates = new Updates({
    api,
    upload
})

const updateDB = () => {
    fs.writeFileSync("./data.json", JSON.stringify(MEMBERS))    
}

const achievements = [
    {msgCount: 100, text: "–Ω–∞–ø–∏—Å–∞–ª(–∞) –ø–µ—Ä–≤—ã–µ 100 —Å–æ–æ–±—â–µ–Ω–∏–π!"},
    {msgCount: 500, text: "–Ω–∞–ø–∏—Å–∞–ª(–∞) –ø–µ—Ä–≤—ã–µ 500 —Å–æ–æ–±—â–µ–Ω–∏–π!!"},
    {msgCount: 1000, text: "–Ω–∞–ø–∏—Å–∞–ª(–∞) 1000 —Å–æ–æ–±—â–µ–Ω–∏–π!!!"},
    {msgCount: 2500, text: "–Ω–∞–ø–∏—Å–∞–ª(–∞) 2500 —Å–æ–æ–±—â–µ–Ω–∏–πüéñ"},
    {msgCount: 5000, text: "–Ω–∞–ø–∏—Å–∞–ª(–∞) 5000 —Å–æ–æ–±—â–µ–Ω–∏–πüéñüéñ"},
    {msgCount: 10000, text: "–Ω–∞–ø–∏—Å–∞–ª(–∞) 10000 —Å–æ–æ–±—â–µ–Ω–∏–π!üéñüéñüéñ"},
    {msgCount: 15000, text: "–Ω–∞–ø–∏—Å–∞–ª(–∞) 15000 —Å–æ–æ–±—â–µ–Ω–∏–π!üèÖ"},
    {msgCount: 20000, text: "–Ω–∞–ø–∏—Å–∞–ª(–∞) 20000 —Å–æ–æ–±—â–µ–Ω–∏–π!üèÖüèÖ"},
    {msgCount: 25000, text: "–Ω–∞–ø–∏—Å–∞–ª(–∞) 25000 —Å–æ–æ–±—â–µ–Ω–∏–π!üèÖüèÖüèÖ"},
    {msgCount: 30000, text: "–Ω–∞–ø–∏—Å–∞–ª(–∞) 30000 —Å–æ–æ–±—â–µ–Ω–∏–π!üèÜ"},
    {msgCount: 35000, text: "–Ω–∞–ø–∏—Å–∞–ª(–∞) 35000 —Å–æ–æ–±—â–µ–Ω–∏–π!üèÜüèÜ"},
    {msgCount: 40000, text: "–Ω–∞–ø–∏—Å–∞–ª(–∞) 40000 —Å–æ–æ–±—â–µ–Ω–∏–π!üèÜüèÜüèÜ"},
    {msgCount: 45000, text: "–Ω–∞–ø–∏—Å–∞–ª(–∞) 45000 —Å–æ–æ–±—â–µ–Ω–∏–π!üî•"},
    {msgCount: 50000, text: "–Ω–∞–ø–∏—Å–∞–ª(–∞) 50000 —Å–æ–æ–±—â–µ–Ω–∏–π!üî•üî•"},
    {msgCount: 60000, text: "–Ω–∞–ø–∏—Å–∞–ª(–∞) 60000 —Å–æ–æ–±—â–µ–Ω–∏–π!üî•üî•üî•"},
    {msgCount: 70000, text: "–Ω–∞–ø–∏—Å–∞–ª(–∞) 70000 —Å–æ–æ–±—â–µ–Ω–∏–π!üí•"},
    {msgCount: 80000, text: "–Ω–∞–ø–∏—Å–∞–ª(–∞) 80000 —Å–æ–æ–±—â–µ–Ω–∏–π!üí•üí•"},
    {msgCount: 90000, text: "–Ω–∞–ø–∏—Å–∞–ª(–∞) 90000 —Å–æ–æ–±—â–µ–Ω–∏–π!üí•üí•üí•"},
    {msgCount: 100000, text: "–Ω–∞–ø–∏—Å–∞–ª(–∞) 100000 —Å–æ–æ–±—â–µ–Ω–∏–π!üíØ"},
] 


const MEMBERS = JSON.parse(
  fs.readFileSync(
    new URL('./data.json', import.meta.url)
  )
);

const beautify = (n) => {
    const beautyn = (""+n).split("").reverse().map((char, index) => {
        if (index%3 === 0) return char + " "
        return char
    }).reverse().join("")
    return beautyn
}

const generateStatMessage = (lim) => {
    let msg = ""
    let total = 0
    const sortedMembers = MEMBERS.sort((a, b) => b.msgCount - a.msgCount)
    sortedMembers.forEach((member, index) => {
        const smile = index === 0 ? "üëë" : index > 0 && index <= 3 ? "‚≠ê" : index > 3 && index <= 9 ? "üí´" : "‚¨ú"
        if (!lim || index < lim) {
            total+=member.msgCount
            msg+=`${smile} ${index+1}. ${member.name} -- ${beautify(member.msgCount)}\n`
        }
    })
    msg+="\n–õ–∏–≤–Ω—É–≤—à–∏–µ -- 22 628"
    msg+=`\n–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${beautify(total+22628)}`
    return msg
}

updates.on("message_new", (ctx) => {
    if ([2000000002].includes(ctx.peerId)) {
        const sortedMembers = MEMBERS.sort((a, b) => b.msgCount - a.msgCount)
        const user = sortedMembers.find((member) => member.ids.includes(ctx.senderId))
        const userIndex = sortedMembers.findIndex((member) => member.ids.includes(ctx.senderId))
        if (user) user.msgCount++
        
        const userAbove = sortedMembers[userIndex-1]

        if (ctx.message.text.toLowerCase().startsWith("–¥–µ–º ")) {
            const msg = ctx.message.text.slice(4)
            if (msg.startsWith("—Å—Ç–∞—Ç") || msg.startsWith("—Å—Ç–∞—Ç–∞") || msg.startsWith("—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")) {
                const lim = msg.replace("—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "").replace("—Å—Ç–∞—Ç–∞", "").replace("—Å—Ç–∞—Ç", "").slice(1)
                let statMsg = ""
                if (lim == +lim) {
                    statMsg = generateStatMessage(lim)
                } else {
                    statMsg = generateStatMessage()
                }
                api.messages.send({
                    peer_id: ctx.peerId,
                    message: "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ \n\n" + statMsg,
                    random_id: Math.random()
                })
            }

            if (["—è", "–æ–±–æ –º–Ω–µ"].includes(msg) ?? user) {
                api.messages.send({
                    peer_id: ctx.peerId,
                    message: `[id${user.ids[0]}|${user.name}] -- ${beautify(user.msgCount)} —Å–æ–æ–±—â–µ–Ω–∏–π`,
                    random_id: Math.random()
                })
            }
            
            if (["–Ω–∏–∫"].includes(msg.slice(0, 3)) && user) {
                const oldNickname = user.name
                const newNickname = msg.slice(4)
                user.name = newNickname
                
                api.messages.send({
                    peer_id: ctx.peerId,
                    message: `[id${user.ids[0]}|${oldNickname}], —Ç–µ–ø–µ—Ä—å —Ç—ã ${newNickname}`,
                    random_id: Math.random()
                })
            }
        } 
      
        if (achievements.some(ach => ach.msgCount === user.msgCount)) {
            const achievement = achievements.find(ach => ach.msgCount === user.msgCount)
            api.messages.send({
                peer_id: ctx.peerId,
                message: `[id${user.ids[0]}|${user.name}] ${achievement.text}`,
                random_id: Math.random()
            })
        }

        if (userAbove && user.msgCount > userAbove.msgCount) {
            api.messages.send({
                peer_id: ctx.peerId,
                message: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [id${user.ids[0]}|${user.name}] –æ–±–æ–≥–Ω–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è [id${userAbove.ids[0]}|${userAbove.name}] –∑–∞–Ω—è–≤ ${userIndex} –º–µ—Å—Ç–æ!`,
                random_id: Math.random()
            })
        }
      
        updateDB()
    } 
})

updates.start();